@use 'sass:map';

.dashkit-grid-item {
    position: relative;
    $_border-radius: 3px;

    &:focus {
        outline: none;
    }

    &__overlay {
        --_-dashkit-overlay-color: var(--dashkit-overlay-color, var(--g-color-base-generic));
        --_-dashkit-overlay-border-color: var(--dashkit-overlay-border-color, rgba(0, 0, 0, 0.1));
        --_-dashkit-overlay-opacity: var(--dashkit-overlay-opacity, 1);
        --_-dashkit-overlay-border-radius: var(
            --dashkit-grid-item-border-radius,
            #{$_border-radius}
        );

        position: absolute;
        inset: 0;
        border-radius: var(--_-dashkit-overlay-border-radius);
        background-color: var(--_-dashkit-overlay-color);
        border: solid 1px var(--_-dashkit-overlay-border-color);
        opacity: var(--_-dashkit-overlay-opacity);
    }

    &__overlay-placeholder {
        position: absolute;
        inset: 0;
    }

    &__item {
        --_-dashkit-grid-item-border-radius: var(
            --dashkit-grid-item-border-radius,
            #{$_border-radius}
        );
        --_-dashkit-grid-item-edit-opacity: var(--dashkit-grid-item-edit-opacity, 0.5);

        position: absolute;
        inset: 0;
        border-radius: var(--_-dashkit-grid-item-border-radius);

        &_editMode {
            opacity: var(--_-dashkit-grid-item-edit-opacity);
            border-color: transparent;
            pointer-events: none;
        }
    }

    // needs for drag n drop between multiple groups
    &_is-dragged-out {
        user-select: none;
        pointer-events: none;
        touch-action: none;
    }
}

.react-grid-item.dropping {
    // Disable evety mouse event for dropping element placeholder
    user-select: none;
    pointer-events: none;
    touch-action: none;
}

.react-grid-layout {
    position: relative;
    transition: height 200ms ease;
}

.react-grid-item.cssTransforms {
    transition-property: transform;
}

.react-grid-item.resizing {
    z-index: 1;
    will-change: width, height;
}

.react-grid-item.react-draggable:not(.dashkit-grid-item_with-custom-handle) {
    cursor: move;
}

.react-grid-item.react-draggable-dragging {
    transition: none;
    z-index: 3;
    will-change: transform;
}

.react-grid-item.dashkit-grid-item_is-focused {
    z-index: 2;
}

.react-grid-item.react-grid-placeholder {
    --_-dashkit-placeholder-color: var(--dashkit-placeholder-color, #fc0);
    --_-dashkit-placeholder-opacity: var(--dashkit-placeholder-opacity, 0.2);

    background: var(--_-dashkit-placeholder-color);
    opacity: var(--_-dashkit-placeholder-opacity);
    transition-duration: 100ms;
    z-index: 2;
    user-select: none;
}

.react-grid-focus-capture {
    position: absolute;
    display: block;
    // Should be the highest between all grid item states
    z-index: 6;
    max-width: 100%;
    max-height: 100%;
}

.react-grid-item .react-resizable-handle {
    position: absolute;
    width: 20px;
    height: 20px;
    z-index: 6;
}

.react-grid-item .react-resizable-handle::after {
    content: '';
    position: absolute;
    border: 4px solid transparent;
}

$handle-color: rgba(0, 0, 0, 0.4);
$handle-list: (
    's': (
        'wrapper': (
            bottom: 0,
            left: 50%,
            transform: translateX(-50%) translateY(0),
        ),
        'icon': (
            bottom: -3px,
            left: 4px,
            border: 6px solid transparent,
            border-top-color: $handle-color,
        ),
    ),
    'w': (
        'wrapper': (
            top: 50%,
            left: 0,
            transform: translateX(0) translateY(-50%),
        ),
        'icon': (
            top: 4px,
            left: -3px,
            border: 6px solid transparent,
            border-right-color: $handle-color,
        ),
    ),
    'e': (
        'wrapper': (
            top: 50%,
            right: 0,
            transform: translateX(0) translateY(-50%),
        ),
        'icon': (
            top: 4px,
            right: -3px,
            border: 6px solid transparent,
            border-left-color: $handle-color,
        ),
    ),
    'n': (
        'wrapper': (
            top: 0,
            left: 50%,
            transform: translateX(-50%) translateY(0),
        ),
        'icon': (
            top: -3px,
            left: 4px,
            border: 6px solid transparent,
            border-bottom-color: $handle-color,
        ),
    ),
    'sw': (
        'wrapper': (
            bottom: 0,
            left: 0,
        ),
        'icon': (
            bottom: 3px,
            left: 3px,
            border-left-color: $handle-color,
            border-bottom-color: $handle-color,
        ),
    ),
    'nw': (
        'wrapper': (
            top: 0,
            left: 0,
        ),
        'icon': (
            top: 3px,
            left: 3px,
            border-left-color: $handle-color,
            border-top-color: $handle-color,
        ),
    ),
    'se': (
        'wrapper': (
            bottom: 0,
            right: 0,
        ),
        'icon': (
            bottom: 3px,
            right: 3px,
            border-right-color: $handle-color,
            border-bottom-color: $handle-color,
        ),
    ),
    'ne': (
        'wrapper': (
            top: 0,
            right: 0,
        ),
        'icon': (
            top: 3px,
            right: 3px,
            border-right-color: $handle-color,
            border-top-color: $handle-color,
        ),
    ),
);

@each $handle, $props in $handle-list {
    .react-grid-item .react-resizable-handle-#{$handle} {
        cursor: #{$handle}-resize;
        @each $prop, $value in map.get($props, 'wrapper') {
            #{$prop}: $value;
        }

        &::after {
            @each $prop, $value in map.get($props, 'icon') {
                #{$prop}: $value;
            }
        }
    }
}
